/**
 * Interface for database drivers.
 *
 * @interface DBDriver
 * @memberof module:x2node-dbos
 */
/**
 * Get SQL for the specified ES value.
 *
 * @function module:x2node-dbos.DBDriver#sql
 * @param {*} val The ES value. If object, <code>toString()</code> is called on
 * it and the result is returned as is. If <code>null</code>, string "NULL" is
 * returned.
 * @returns {string} String representing the value in SQL, or <code>null</code>
 * if the value cannot be represented in SQL (includes <code>undefined</code>,
 * <code>NaN</code>, <code>Infinity</code> and arrays).
 */
/**
 * Get Boolean SQL literal.
 *
 * @function module:x2node-dbos.DBDriver#booleanLiteral
 * @param {*} val The ES value.
 * @returns {string} String representing Boolean true or false in SQL.
 */
/**
 * Get string SQL literal.
 *
 * @function module:x2node-dbos.DBDriver#stringLiteral
 * @param {string} val The ES string.
 * @returns {string} String representing the string in SQL.
 */
/**
 * Get SQL fragment that can be used as a column label in a <code>SELECT</code>
 * clause from the specified string.
 *
 * @function module:x2node-dbos.DBDriver#safeLabel
 * @param {string} label The ES string to use as a column label.
 * @returns {string} SQL fragment for the label.
 */
/**
 * Make necessary escapes in the specified string to make it safe to use as a
 * SQL <code>LIKE</code> condition pattern.
 *
 * @function module:x2node-dbos.DBDriver#safeLikePatternFromString
 * @param {string} str The ES string to make safe to use as a pattern.
 * @returns {string} The string with all the necessary escapes.
 */
/**
 * Make SQL expression that gets the string length for the specified string SQL
 * expression.
 *
 * @function module:x2node-dbos.DBDriver#stringLength
 * @param {string} expr The string SQL expression.
 * @returns {string} SQL expression that gets the string length.
 */
/**
 * Make SQL expression that converts the specified string SQL expression to lower
 * case.
 *
 * @function module:x2node-dbos.DBDriver#stringLowercase
 * @param {string} expr The string SQL expression.
 * @returns {string} SQL expression that converts the string to lower case.
 */
/**
 * Make SQL expression that converts the specified string SQL expression to upper
 * case.
 *
 * @function module:x2node-dbos.DBDriver#stringUppercase
 * @param {string} expr The string SQL expression.
 * @returns {string} SQL expression that converts the string to upper case.
 */
/**
 * Make SQL expression that pads the specified string SQL expression with the
 * specified character on the left until the specified length is achieved.
 *
 * @function module:x2node-dbos.DBDriver#stringLeftPad
 * @param {string} expr The string SQL expression.
 * @param {number} width Minimum resulting string length to achieve with padding.
 * @param {string} pad The character to use as the padding.
 * @returns {string} SQL expression that pads the string on the left.
 */
/**
 * Make SQL expression that concatenates the specified string SQL expressions and
 * evaluates to <code>NULL</code> if any of them is <code>NULL</code>.
 *
 * @function module:x2node-dbos.DBDriver#nullableConcat
 * @param {...string} exprs String SQL expressions to concatenate.
 * @returns {string} SQL expression that concatenates the specified string SQL
 * expressions.
 */
/**
 * Make SQL expression for getting a substring of the specified string SQL
 * expression.
 *
 * @function module:x2node-dbos.DBDriver#stringSubstring
 * @param {string} expr SQL string expression.
 * @param {(number|string)} from Zero-based first character to include in the
 * substring. If not number, assumed to be a SQL expression.
 * @param {(number|string)} [len] Optional maximum length of the substring. If
 * not number, assumed to be a SQL expression. If not specified, the end of the
 * string is assumed.
 * @returns {string} SQL expression for the substring.
 */
/**
 * Make SQL expression that converts the specified SQL expression to string.
 *
 * @function module:x2node-dbos.DBDriver#castToString
 * @param {string} expr The SQL expression to convert to string.
 * @returns {string} SQL expression that evaluates to a string value.
 */
/**
 * Make SQL expression that evaluates the specified SQL expression and resolves
 * into SQL <code>TRUE</code> or SQL </code>NULL</code> if the result is true or
 * false respectively.
 *
 * @function module:x2node-dbos.DBDriver#booleanToNull
 * @param {string} expr The Boolean SQL expression to evaluate.
 * @returns {string} SQL expression that evaluates to <code>TRUE</code> or
 * <code>NULL</code>.
 */
/**
 * Make specified <code>SELECT</code> statement ranged.
 *
 * @function module:x2node-dbos.DBDriver#makeRangedSelect
 * @param {string} selectStmt The <code>SELECT</code> statement to make ranged.
 * @param {number} offset Zero-based number of the first row in the range.
 * @param {number} limit Maximum number of rows in the range.
 * @returns {string} Ranged <code>SELECT</code> statement.
 */
/**
 * Make SQL expression that evaluates to the result of the first of the specified
 * SQL expressions that is not <code>NULL</code>, or <code>NULL</code> if all
 * evaluate to <code>NULL</code>.
 *
 * @function module:x2node-dbos.DBDriver#coalesce
 * @param {...string} exprs SQL expressions to evaluate.
 * @returns {string} SQL expression that evaluates to the first
 * non-<code>NULL</code>.
 */
/**
 * Construct a SQL <code>DELETE</code> statement that can have a
 * <code>WHERE</code> clause that uses columns from other joined tables. Note,
 * that the statement still deletes rows only from a single table.
 *
 * @function module:x2node-dbos.DBDriver#buildDeleteWithJoins
 * @param {string} fromTableName Name of the table, from which to delete.
 * @param {string} fromTableAlias Alias for the <code>fromTableName</code> used
 * in the join conditions and the <code>WHERE</code> clause.
 * @param {Array.<Object>} [refTables] Array of descriptors of reference tables
 * joined to the <code>fromTableName</code> and used in the <code>WHERE</code>
 * clause.
 * @param {string} [refTables.tableName] Reference table name.
 * @param {string} [refTables.tableAlias] Reference table alias used in the join
 * condition and the <code>WHERE</code> clause.
 * @param {string} [refTables.joinCondition] Boolean SQL expression for the
 * reference table join condition.
 * @param {string} [filterExpr] Boolean SQL expression for the <code>WHERE</code>
 * clause. The expression may use <code>fromTableAlias</code> and aliases of the
 * reference tables to refer to the corresponding tables.
 * @param {boolean} [filterExprParen] <code>true</code> indicates that if the
 * <code>filterExpr</code> is included in a logical conjunction (the "AND"
 * Boolean operation), it needs to be enclosed in parenthesis.
 * @returns {string} The resulting <code>DELETE</code> statement.
 */
/**
 * Start transaction on the specified database connection.
 *
 * @function module:x2node-dbos.DBDriver#startTransaction
 * @param {*} connection Driver-specific database connection object.
 * @param {Object} handler The operation result handler.
 * @param {function} handler.onSuccess Fucntion that gets called upon operation
 * success.
 * @param {function} handler.onError Fucntion that gets called upon operation
 * failure. The function receives a single argument with the error object.
 */
/**
 * Roll back transaction on the specified database connection.
 *
 * @function module:x2node-dbos.DBDriver#rollbackTransaction
 * @param {*} connection Driver-specific database connection object.
 * @param {Object} handler The operation result handler.
 * @param {function} handler.onSuccess Fucntion that gets called upon operation
 * success.
 * @param {function} handler.onError Fucntion that gets called upon operation
 * failure. The function receives a single argument with the error object.
 */
/**
 * Commit transaction on the specified database connection.
 *
 * @function module:x2node-dbos.DBDriver#commitTransaction
 * @param {*} connection Driver-specific database connection object.
 * @param {Object} handler The operation result handler.
 * @param {function} handler.onSuccess Fucntion that gets called upon operation
 * success.
 * @param {function} handler.onError Fucntion that gets called upon operation
 * failure. The function receives a single argument with the error object.
 */
/**
 * Execute specified statement on the specified database connection. The
 * statement may be returning a result set.
 *
 * @function module:x2node-dbos.DBDriver#executeQuery
 * @param {*} connection Driver-specific database connection object.
 * @param {string} statement The statement to execute.
 * @param {Object} handler The operation result handler.
 * @param {function} handler.onSuccess Fucntion that gets called upon operation
 * success.
 * @param {function} handler.onError Fucntion that gets called upon operation
 * failure. The function receives a single argument with the error object.
 * @param {function} [handler.onHeader] Function that gets called when the
 * <code>SELECT</code> query result set descriptor is received from the database.
 * The function receives a single argument, which is an array of strings
 * corresponding to the column names in the result set.
 * @param {function} [handler.onRow] Function that gets called when the
 * <code>SELECT</code> query result set row is received from the database. The
 * function gets a single argument, which, depending on the driver, can be an
 * array of values, one for each column, or an object with column names as the
 * keys and the corresponding values as the values.
 */
/**
 * Execute specified statement on the specified database connection. The
 * statement is intended to modify data (such as <code>UPDATE</code> and
 * <code>DELETE</code> statements).
 *
 * @function module:x2node-dbos.DBDriver#executeUpdate
 * @param {*} connection Driver-specific database connection object.
 * @param {string} statement The statement to execute.
 * @param {Object} handler The operation result handler.
 * @param {function} handler.onSuccess Fucntion that gets called upon operation
 * success. The function gets the number of affected rows as its only argument.
 * @param {function} handler.onError Fucntion that gets called upon operation
 * failure. The function receives a single argument with the error object.
 */
/**
 * Execute specified <code>INSERT</code> statement.
 *
 * @function module:x2node-dbos.DBDriver#executeInsert
 * @param {*} connection Driver-specific database connection object.
 * @param {string} statement The <code>INSERT</code> statement to execute.
 * @param {Object} handler The operation result handler.
 * @param {function} handler.onSuccess Fucntion that gets called upon operation
 * success. If <code>idColumn</code> argument is provided, the function gets the
 * inserted record id as its only argument.
 * @param {function} handler.onError Fucntion that gets called upon operation
 * failure. The function receives a single argument with the error object.
 * @param {string} [idColumn] Name of the auto-generated id column in the table.
 * If specified, the result promise will resovle to the generated id value.
 */
