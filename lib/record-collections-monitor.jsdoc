/**
 * Version information. May represent version information of a single records
 * collection, or an aggregate version information for a multiple collections.
 *
 * @typedef {Object} module:x2node-dbos.RecordCollectionsMonitor~VersionInfo
 * @property {Date} modifiedOn Last modification timestamp. If multiple
 * collections are represented, this is the most recent modification timestamp
 * from among them.
 * @property {number} version Version number. If multiple collections are
 * represented, this is the sum of all individual version numbers, thus
 * representing the version number of the collections combination as a whole.
 */

/**
 * Interface for components that monitor updates to record collections of each
 * record type as a whole.
 *
 * @interface RecordCollectionsMonitor
 * @memberof module:x2node-dbos
 */
/**
 * Lock record collection(s) for the transaction and get the aggregate version
 * information for all or a subset of the locked collections.
 *
 * @function module:x2node-dbos.RecordCollectionsMonitor#lockCollections
 * @param {module:x2node-dbos~Transaction} tx The transaction.
 * @param {Object} locks The lock types and collections to lock.
 * @param {Iterable.<string>} [locks.shared] Names of record types to lock in
 * shared mode.
 * @param {Iterable.<string>} [locks.exclusive] Names of record types to lock in
 * exclusive mode. Versions of these record types can be later updated in the
 * transaction using
 * {@link module:x2node-dbos.RecordCollectionsMonitor#collectionsUpdated} method.
 * @param {Iterable.<string>} [includeInVersion] Optional names of record types
 * to include in the returned aggregate collection version information object. If
 * not specicied, all locked record types are included.
 * @returns {Promise.<module:x2node-dbos.RecordCollectionsMonitor~VersionInfo>}
 * Promise of the requested version information object. Once the promise fulfills
 * the collections are locked for the duration of the transaction.
 */
/**
 * Locks the specified records collection in shared mode for the rest of the
 * transaction. Does nothing if already locked.
 *
 * @function module:x2node-dbos.RecordCollectionsMonitor#lockCollectionForShare
 * @param {module:x2node-dbos~Transaction} tx The transaction.
 * @param {string} recordTypeName Record type name to lock.
 * @returns {Promise} Promise that is fulfilled upon lock placement or rejected
 * if error.
 */
/**
 * Called by the DBOs from within the transactions when records of the given
 * record types are modified. The monitor ensures that the collections included
 * in the <code>recordTypeNames</code> argument are previously exclusively locked
 * for the transaction using
 * {@link module:x2node-dbos.RecordCollectionsMonitor#lockCollections} method.
 * If not, the returned promise is rejected.
 *
 * @function module:x2node-dbos.RecordCollectionsMonitor#collectionsUpdated
 * @param {module:x2node-dbos~DBOExecutionContext} ctx DBO execution context.
 * @param {Iterable.<string>} recordTypeNames Names of updated record types.
 * Allowed to be <code>null</code>, <code>undefined</code> or empty.
 * @returns {Promise} If a <code>Promise</code> is returned, the transaction is
 * not committed until the promise is fulfilled. If the promise is rejected, the
 * whole transaction gets rolled back. Any other type of returned value is
 * ignored and the transaction is committed.
 */
